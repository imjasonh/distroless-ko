on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

  # Allow manually triggered workflows by maintainers without any
  # parameters to trigger a proactive rebuild (e.g. when a new
  # apko lands)
  workflow_dispatch: {}

name: Create Release

# Don't run multiple releases concurrently.
concurrency: release

jobs:
  build:
    name: Release OCI image
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    outputs:
      image-refs: ${{ steps.emit-refs.outputs.image-refs }}

    steps:
    - uses: actions/checkout@v3
    - uses: distroless/actions/apko-snapshot@main
      id: builds
      with:
        config: apko.yaml
        base-tag: ghcr.io/${{ github.repository }}

    - name: Emit Image Refs output
      id: emit-refs
      run: |
          cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]' | jq .
          echo ::set-output name=image-refs::$(cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')

    # Post to slack when things fail.
    - if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_ICON: http://github.com/chainguardian.png?size=48
        SLACK_USERNAME: chainguardian
        SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
        SLACK_CHANNEL: distroless-alerts
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Releasing ${{ github.repository }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  scan:
    name: Scan apko images
    needs: build
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    strategy:
      matrix:
        ref: ${{ fromJson(needs.build.outputs.image-refs) }}
    steps:
      - run: |
          echo ${{ matrix.ref }}

      - uses: distroless/actions/vul-scans@main
        id: scans
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
          image: ${{ matrix.ref }}
          RUN_SNYK: "false"
          RUN_GRYPE: "false"
          DOCKER_LOGIN: 'true'

      - name: Image Vulnerability scan output
        shell: bash
        env:
          SNYK_COUNT: ${{ steps.scans.outputs.SNYK_COUNT }}
          GRYPE_COUNT: ${{ steps.scans.outputs.GRYPE_COUNT }}
          TRIVY_COUNT: ${{ steps.scans.outputs.TRIVY_COUNT }}
        run: |
          echo "Image Vulnerability scan output" >> $GITHUB_STEP_SUMMARY
          echo "Image ID: ${{ matrix.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Snyk Count: $SNYK_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "Grype Count: $GRYPE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "Trivy Count: $TRIVY_COUNT" >> $GITHUB_STEP_SUMMARY

      # Post to slack when things fail.
      - if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_ICON: http://github.com/chainguardian.png?size=48
          SLACK_USERNAME: chainguardian
          SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: distroless-alerts
          SLACK_COLOR: '#8E1600'
          MSG_MINIMAL: 'true'
          SLACK_TITLE: Releasing ${{ github.repository }} failed.
          SLACK_MESSAGE: |
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
      - if: ${{ steps.scans.outputs.TRIVY_COUNT != '0' || steps.scans.outputs.GRYPE_COUNT != '0' || steps.scans.outputs.SNYK_COUNT != '0'  }}
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_ICON: http://github.com/chainguardian.png?size=48
          SLACK_USERNAME: chainguardian
          SLACK_WEBHOOK: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: distroless-alerts
          SLACK_COLOR: '#8E1600'
          MSG_MINIMAL: 'false'
          SLACK_TITLE: Vulnerability Report for ${{ github.repository }}.
          SLACK_MESSAGE: |
            Snyk Count: ${{ steps.scans.outputs.SNYK_COUNT }}
            Grype Count: ${{ steps.scans.outputs.GRYPE_COUNT }}
            Trivy Count: ${{ steps.scans.outputs.TRIVY_COUNT }}
            Image ID: ${{ matrix.ref }}
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  generate-readme:
    name: Generate README
    needs: scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Generate README
        uses: distroless/readme-generator@main
        with:
          repo: https://github.com/distroless/ko
          name: ko
          location: cgr.dev/chainguard/ko
          description: "This is an image that contains ko, go, and build-base.<br/>This image is designed for use in situations where you would like to use `ko` with codebases that have C dependencies where `cgo` must be used. In these cases, staticly linking against musl instead of glibc results in smaller binaries."
          exclude-tags: 0.11.2-r1,0.11.2-r0,0.11.2-r2
          output-path: README-GENERATED.md
      - name: Push new README back to the repo
        run: |
          set -x
          if [[ "$(diff README-GENERATED.md README.md)" == "" ]]; then
            echo "No diff detected in README. Skipping."
            exit 0
          fi
          git config user.name "Automated"
          git config user.email "actions@users.noreply.github.com"
          mv README-GENERATED.md README.md
          git add README.md
          git commit -m "Regenerate README.md" || exit 0
          git push
